<?xml version="1.0" encoding="UTF-8"?>
<launch>

    <!-- 
    This string will be taken to search for camera extrinsics yaml file like 
    $(find magni_description)/extrinsics/camera_extrinsics_$(arg camera_position).yaml
    so if that yaml file does not exsist, the xacro file will return "No such file or directory" error
    Leave empty to disable
    -->
    <arg name="camera_position" default="forward"/>
    
    <!-- 
    This string will be taken to search for lidar extrinsics yaml file like 
    $(find magni_description)/extrinsics/lidar_extrinsics_$(arg lidar_position).yaml
    so if that yaml file does not exsist, the xacro file will return "No such file or directory" error
    Leave empty to disable
    -->
    <arg name="lidar_position" default="top_plate"/>
    
    <!-- Weather the sonar sensors are installed on the robot -->
    <arg name="sonars_installed" default="true"/>
    
    <!-- Weather the shell is installed on the robot -->
    <arg name="shell_installed" default="false"/>

    <!-- Weather the tower is installed on the robot -->
    <arg name="tower_installed" default="false"/>

    <arg name="lidar_extrinsics_file" value="$(find magni_description)/extrinsics/lidar_extrinsics_$(arg lidar_position).yaml"/>
    <arg name="camera_extrinsics_file" value="$(find magni_description)/extrinsics/camera_extrinsics_$(arg camera_position).yaml"/>

    <include file="$(find magni_description)/launch/description.launch">
        <arg name="camera_extrinsics_file" value="$(arg camera_extrinsics_file)" />
        <arg name="shell_installed" value="$(arg shell_installed)" />
        <arg name="tower_installed" value="$(arg tower_installed)" />
        <arg name="sonars_installed" value="$(arg sonars_installed)" />
        <arg name="lidar_extrinsics_file" value="$(arg lidar_extrinsics_file)" />
    </include>

    <node name="magni_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" args="-urdf -param robot_description -model magni" />
    
    <!-- Load the parameters used by the following nodes -->
    <rosparam file="$(find magni_gazebo)/config/magni_controllers.yaml" command="load"/>
    <!-- Launch the roscontrol controllers needed -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" args="ubiquity_velocity_controller ubiquity_joint_publisher"/>

    <!-- Topic redirection for compatibility with real robot configuration (core.launch) -->
    <!-- 'topic_tools relay' is used to redirect topics, because remap doesn't work in Gazebo. -->
    <node name="cmd_vel_relay" type="relay" pkg="topic_tools" args="/cmd_vel /ubiquity_velocity_controller/cmd_vel" />
    <node name="odom_relay" type="relay" pkg="topic_tools" args="/ubiquity_velocity_controller/odom /odom" />

    <node name="sonar0_relay" type="relay" pkg="topic_tools" args="/pi_sonar/sonar_0 /sonars" />
    <node name="sonar1_relay" type="relay" pkg="topic_tools" args="/pi_sonar/sonar_1 /sonars" />
    <node name="sonar2_relay" type="relay" pkg="topic_tools" args="/pi_sonar/sonar_2 /sonars" />
    <node name="sonar3_relay" type="relay" pkg="topic_tools" args="/pi_sonar/sonar_3 /sonars" />
    <node name="sonar4_relay" type="relay" pkg="topic_tools" args="/pi_sonar/sonar_4 /sonars" />

</launch>
